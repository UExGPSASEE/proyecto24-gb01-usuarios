/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.unex.swagger.api;


//import io.swagger.model.ComponentssecuritySchemescookieAuth;
import es.unex.swagger.model.Suscripcion;
import es.unex.swagger.model.TarjetaCredito;
import es.unex.swagger.model.TipoSuscripcion;
import es.unex.swagger.model.User;
import es.unex.swagger.model.UserLogIn;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.CookieValue;


import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-18T10:29:32.211856553Z[GMT]")
@Validated
public interface UsersApi {

    @Operation(summary = "Elimina la suscripción de un usuario, dando la id de la suscripción", description = "Elimina la suscripción de un usuario, dando la id de la suscripción.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "subscription" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Operación exitosa."),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Suscripción no encontrada") })
    @RequestMapping(value = "/users/subscriptions",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSubscriptionByUserCookie(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
);


    @Operation(summary = "Elimina el usuario por su id", description = "Elimina el usuario dado su id en el endpoint.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado") })
    @RequestMapping(value = "/users/{idUser}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<User> deleteUserById(@Parameter(in = ParameterIn.PATH, description = "El id del usuario que se desea buscar.", required=true, schema=@Schema()) @PathVariable("idUser") Integer idUser
);


    @Operation(summary = "Devuelve la información de todos los usuarios", description = " Devuelve la lista de todos los usuarios del sistema registrados.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getAllUsers();


    @Operation(summary = "Devuelve la suscripción de un usuario.", description = "Devuelve la suscripción de un usuario, a partir de la cookie guardada en el navegador sobre el usuario.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "subscription" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Suscripcion.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Suscripción no encontrada") })
    @RequestMapping(value = "/users/subscriptions",
        produces = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.GET)
    ResponseEntity<Suscripcion> getSubscriptionByUserCookie(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
);


    @Operation(summary = "Devuelve el usuario por su id", description = "Devuelve toda la infomración del usuario, dada su id", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado") })
    @RequestMapping(value = "/users/{idUser}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserById(@Parameter(in = ParameterIn.PATH, description = "El id del usuario que se desea buscar.", required=true, schema=@Schema()) @PathVariable("idUser") Integer idUser
);


    @Operation(summary = "Añade un nuevo usuario a la base de datos.", description = "Añade un nuevo usuario a la base de datos, recibiendo todo su información en el cuerpo de la petición.", security = {
        @SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Succesful operation. Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado"),
        
        @ApiResponse(responseCode = "422", description = "Excepción de validación") })
    @RequestMapping(value = "/users",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> postUser(@Parameter(in = ParameterIn.DEFAULT, description = "Add a new user in the database", required=true, schema=@Schema()) @Valid @RequestBody UserLogIn body
);
    // Nuevo método que acepta datos en formato form-urlencoded
    @PostMapping( value = "/users",consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    ResponseEntity<User> postUserForm(
            @RequestParam("nombre") String nombre,
            @RequestParam("apellidos") String apellidos,
            @RequestParam("username") String username,
            @RequestParam("email") String email,
            @RequestParam("password") String password);
/*    @Operation(summary = "Create a new user", description = "Creates a new user using `x-www-form-urlencoded` data.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "User created successfully",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
            @ApiResponse(responseCode = "400", description = "Invalid input data", content = @Content)
    })
    @PostMapping(consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})
    ResponseEntity<User> createUserByForm( @Parameter(description = "Form data containing user details", required = true,
            content = @Content(mediaType = MediaType.APPLICATION_FORM_URLENCODED_VALUE))
                                           @RequestBody MultiValueMap<String, String> formParams);*/


   /* @Operation(summary = "Update an existing user", description = "Updates a user's data by their ID using `x-www-form-urlencoded` data.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "User updated successfully",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
            @ApiResponse(responseCode = "404", description = "User not found", content = @Content),
            @ApiResponse(responseCode = "400", description = "Invalid input data", content = @Content)
    })
    @PutMapping(path = "/{id}",consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})
    ResponseEntity<User> updateUserByForm(@Parameter(description = "ID of the user to be updated", required = true)
                                          @PathVariable("id") Long id,
                                          @Parameter(description = "Form data containing user details", required = true,
                                                  content = @Content(mediaType = MediaType.APPLICATION_FORM_URLENCODED_VALUE))
                                          @RequestBody MultiValueMap<String, String> formParams);*/


    @Operation(summary = "Actualiza la información del usuario por su id", description = "Actualiza la información del usuario dado su id en el endpoint.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado") })
    @RequestMapping(value = "/users/{idUser}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> putUserById(@Parameter(in = ParameterIn.PATH, description = "El id del usuario que se desea buscar.", required=true, schema=@Schema()) @PathVariable("idUser") Integer idUser, @Valid @RequestBody User body
);


    @Operation(summary = "Actualiza la suscripción de un usuario, dando la cookie del usuario", description = "Actualiza la suscripción de un usuario, dando la cookie del usuario.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "subscription" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Operación exitosa.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Suscripcion.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Suscripción no encontrada") })
    @RequestMapping(value = "/users/subscriptions",
        produces = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Suscripcion> updateSubscriptionByUserCookie(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Suscripcion body
);


    @Operation(summary = "Inicio de sesión de un usuario", description = "Inicio de sesión de un usuario, añadiendo la cookie para mantener la sesión abierta.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully authenticated. The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Usuario no encontrado") })
    @RequestMapping(value = "/users/login",
        produces = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> userLogIn(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UserLogIn body, HttpServletResponse response
);


//     @Operation(summary = "Cierra la sesión del usuario", description = "Cierra la sesion del usuario, eliminando la cookie de la sesión del navegador.", security = {
//         @SecurityRequirement(name = "cookieAuth")    }, tags={ "user" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Succesful operation"),
        
//         @ApiResponse(responseCode = "400", description = "Error al cerrar sesión."),
        
//         @ApiResponse(responseCode = "404", description = "Usuario no encontrado.") })
//     @RequestMapping(value = "/users/logout",
//         method = RequestMethod.GET)
//     ResponseEntity<Void> usersLogoutGet(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) //@CookieValue(value="SessionCookie", required=true) //ComponentssecuritySchemescookieAuth sessionCookie
// );

}


/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.unex.swagger.api;

import es.unex.swagger.model.TarjetaCredito;
import es.unex.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-18T10:29:32.211856553Z[GMT]")
@Validated
public interface CreditsCardApi {

    @Operation(summary = "Añade una nueva tarjeta de crédito al usuario", description = "Inserta una nueva forma de pago al usuario", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "creditCard" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa."),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Usuario o perfil de usuario no encontrado") })
    @RequestMapping(value = "/creditsCard",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addCreditCard(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody TarjetaCredito body
);


    @Operation(summary = "Eliimina la información de la tarjeta de crédito, dada su IBAN", description = "Elimina la información relacionada con la tarjeta de crédito, proporcionando su IBAN ", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "creditCard" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TarjetaCredito.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "IBAN no encontrado") })
    @RequestMapping(value = "/creditsCard/{IBAN}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<TarjetaCredito> deleteCreditCardByIBAN(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("IBAN") String IBAN
);


    @Operation(summary = "Devuelve la información de la tarjeta de crédito, dada su IBAN", description = "Obtiene la información relacionada con la tarjeta de crédito, proporcionando su IBAN ", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "creditCard" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TarjetaCredito.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "IBAN no encontrado") })
    @RequestMapping(value = "/creditsCard/{IBAN}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<TarjetaCredito> getCreditCardByIBAN(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("IBAN") String IBAN
);


    @Operation(summary = "Devuelve la lista de todas las tarjetas de crédito del usuario", description = "Devuelve la lista de todas las tarjetas de crédito del usuario", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "creditCard" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TarjetaCredito.class)))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "Usuario o perfil de usuario no encontrado") })
    @RequestMapping(value = "/creditsCard",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TarjetaCredito>> getMyCreditsCard();


    @Operation(summary = "Actualiza la información de la tarjeta de crédito, dada su IBAN", description = "Actualiza la información relacionada con la tarjeta de crédito, proporcionando su IBAN ", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "creditCard" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TarjetaCredito.class))),
        
        @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
        @ApiResponse(responseCode = "404", description = "IBAN no encontrado") })
    @RequestMapping(value = "/creditsCard/{IBAN}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<TarjetaCredito> updateCreditCardByIBAN(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("IBAN") String IBAN
);

}


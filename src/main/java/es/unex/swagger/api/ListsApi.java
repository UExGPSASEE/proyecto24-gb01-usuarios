// /**
//  * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
//  * https://github.com/swagger-api/swagger-codegen
//  * Do not edit the class manually.
//  */
// package io.swagger.api;

// import io.swagger.model.HttpsappSwaggerhubComapisdmocinhamedifliContent100swaggerYamlcomponentsschemasMoviepropertiesid;
// import io.swagger.model.ListaContent;
// import io.swagger.model.User;
// import io.swagger.v3.oas.annotations.Operation;
// import io.swagger.v3.oas.annotations.Parameter;
// import io.swagger.v3.oas.annotations.enums.ParameterIn;
// import io.swagger.v3.oas.annotations.responses.ApiResponses;
// import io.swagger.v3.oas.annotations.responses.ApiResponse;
// import io.swagger.v3.oas.annotations.media.ArraySchema;
// import io.swagger.v3.oas.annotations.media.Content;
// import io.swagger.v3.oas.annotations.media.Schema;
// import io.swagger.v3.oas.annotations.security.SecurityRequirement;
// import org.springframework.http.ResponseEntity;
// import org.springframework.validation.annotation.Validated;
// import org.springframework.web.bind.annotation.PathVariable;
// import org.springframework.web.bind.annotation.RequestBody;
// import org.springframework.web.bind.annotation.RequestHeader;
// import org.springframework.web.bind.annotation.RequestMapping;
// import org.springframework.web.bind.annotation.RequestMethod;
// import org.springframework.web.bind.annotation.RequestParam;
// import org.springframework.web.bind.annotation.RequestPart;
// import org.springframework.web.multipart.MultipartFile;
// import org.springframework.web.bind.annotation.CookieValue;

// import javax.validation.Valid;
// import javax.validation.constraints.*;
// import java.util.List;
// import java.util.Map;

// @javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-18T10:29:32.211856553Z[GMT]")
// @Validated
// public interface ListsApi {

//     @Operation(summary = "Elimina un content de la lista de content, dada el id de la lista de content.", description = "Elimina un content de la lista de content, dada el id de la lista de content. En el cuerpo, se debe especificar los parámetros necesarios de la Clase \"Content\".", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "204", description = "Operación exitosa."),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Content no encontrada") })
//     @RequestMapping(value = "/lists/{idList}/contents/{idContent}",
//         method = RequestMethod.DELETE)
//     ResponseEntity<Void> deleteContentByidContent(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
// , @Parameter(in = ParameterIn.PATH, description = "Id de la lista de content a la que se quiere acceder", required=true, schema=@Schema()) @PathVariable("idList") Long idList
// , @Parameter(in = ParameterIn.PATH, description = "Id del content en la lista que se desea eliminar.", required=true, schema=@Schema()) @PathVariable("idContent") Long idContent
// );


//     @Operation(summary = "Elimina una lista de content al user, dada el id de la lista", description = "Elimina una lista de contents al user que ha iniciado sesión, dada la id de la lista.", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListaContent.class))),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Lista no encontrada") })
//     @RequestMapping(value = "/lists/{idList}",
//         produces = { "application/json", "application/xml" }, 
//         method = RequestMethod.DELETE)
//     ResponseEntity<ListaContent> deleteListById(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
// , @Parameter(in = ParameterIn.PATH, description = "Id de la lista que se quiere conseguir la información.", required=true, schema=@Schema()) @PathVariable("idList") Long idList
// );


//     @Operation(summary = "Devuelve el content guardado en una lista, dada la id del content.", description = "Devuelve la información del content guardado en una lista, dada la id del contneido.", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Operación exitosa."),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Lista o content no encontrado") })
//     @RequestMapping(value = "/lists/{idList}/contents/{idContent}",
//         method = RequestMethod.GET)
//     ResponseEntity<Void> getContentsByidContent(@Parameter(in = ParameterIn.PATH, description = "Id de la lista que se quiere conseguir la información.", required=true, schema=@Schema()) @PathVariable("idList") Long idList
// , @Parameter(in = ParameterIn.PATH, description = "Id del content en la lista que se desea eliminar.", required=true, schema=@Schema()) @PathVariable("idContent") Long idContent
// );


//     @Operation(summary = "Devuelve todo el content guardado en una lista, dada su id.", description = "Devuelve todo el content guardado en una lista, dada su id.", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Operación exitosa.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HttpsappSwaggerhubComapisdmocinhamedifliContent100swaggerYamlcomponentsschemasMoviepropertiesid.class)))),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Lista no encontrada") })
//     @RequestMapping(value = "/lists/{idList}/contents",
//         produces = { "application/json", "application/xml" }, 
//         method = RequestMethod.GET)
//     ResponseEntity<List<HttpsappSwaggerhubComapisdmocinhamedifliContent100swaggerYamlcomponentsschemasMoviepropertiesid>> getContentsByidList(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
// , @Parameter(in = ParameterIn.PATH, description = "Id de la lista que se quiere conseguir la información.", required=true, schema=@Schema()) @PathVariable("idList") Long idList
// );


//     @Operation(summary = "Devuelve una lista de content al user, dada el id de la lista", description = "Devuelve una lista de contents al user que ha iniciado sesión, dada la id de la lista.", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListaContent.class))),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Lista no encontrada") })
//     @RequestMapping(value = "/lists/{idList}",
//         produces = { "application/json", "application/xml" }, 
//         method = RequestMethod.GET)
//     ResponseEntity<ListaContent> getListById(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
// , @Parameter(in = ParameterIn.PATH, description = "Id de la lista que se quiere conseguir la información.", required=true, schema=@Schema()) @PathVariable("idList") Long idList
// );


//     @Operation(summary = "Devuelve las listas de contents del user", description = "Devuelve las listas de contents del user que ha iniciado sesión.", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ListaContent.class)))),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Listas no encontradas") })
//     @RequestMapping(value = "/lists",
//         produces = { "application/json", "application/xml" }, 
//         method = RequestMethod.GET)
//     ResponseEntity<List<ListaContent>> getLists();


//     @Operation(summary = "Añade un nuevo content a la lista de content, dada el id de la lista de content.", description = "Añade un nuevo content a la lista de content, dada el id de la lista de content. En el cuerpo, se debe especificar los parámetros necesarios de la Clase \"Content\".", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "201", description = "Operación exitosa."),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Lista no encontrada") })
//     @RequestMapping(value = "/lists/{idList}/contents",
//         consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
//         method = RequestMethod.POST)
//     ResponseEntity<Void> postContentByidList(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
// , @Parameter(in = ParameterIn.PATH, description = "Id de la lista de content a la que se quiere acceder", required=true, schema=@Schema()) @PathVariable("idList") Long idList
// );


//     @Operation(summary = "Añade una lista de content al user", description = "Añade una lista de contents al user que ha iniciado sesión.", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ListaContent.class)))),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado") })
//     @RequestMapping(value = "/lists",
//         produces = { "application/json", "application/xml" }, 
//         consumes = { "application/json", "application/xml" }, 
//         method = RequestMethod.POST)
//     ResponseEntity<List<ListaContent>> postList(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ListaContent body
// );


//     @Operation(summary = "Actualiza o añade un nuevo un content a la lista de content, dada el id de la lista de content.", description = "Actualiza o añade un nuevo content a la lista de content, dada el id de la lista de content. En el cuerpo, se debe especificar los parámetros necesarios de la Clase \"Content\".", security = {
//         @SecurityRequirement(name = "cookieAuth"),
// @SecurityRequirement(name = "medifli_auth", scopes = {
//             "write:users",
// "read:users"        })    }, tags={ "lists" })
//     @ApiResponses(value = { 
//         @ApiResponse(responseCode = "200", description = "Operación exitosa."),
        
//         @ApiResponse(responseCode = "400", description = "Valor no soportado"),
        
//         @ApiResponse(responseCode = "404", description = "Lista no encontrada") })
//     @RequestMapping(value = "/lists/{idList}/contents",
//         consumes = { "application/json", "application/xml" }, 
//         method = RequestMethod.PUT)
//     ResponseEntity<Void> updateContentByidList(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
// , @Parameter(in = ParameterIn.PATH, description = "Id de la lista de content a la que se quiere acceder", required=true, schema=@Schema()) @PathVariable("idList") Long idList
// );

// }


/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package es.unex.swagger.api;


import es.unex.swagger.model.User;
import es.unex.swagger.model.VerMasTarde;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-18T10:29:32.211856553Z[GMT]")
@Validated
public interface SeeLaterApi {

    @Operation(summary = "Elimina un contenido de la lista de favoritos del \"Ver más tarde\", obteniendolo mediante la cookie de la sesión.", description = "Elimina un contenido de la lista de \"Ver más tarde\" del usuario", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "seeLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerMasTarde.class))),
        
        @ApiResponse(responseCode = "400", description = "Usuario no encontrado"),
        
        @ApiResponse(responseCode = "404", description = "Valor no soportado") })
    @RequestMapping(value = "/seeLater/{idContent}",
        produces = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<VerMasTarde> deleteSeeLaterContentByIdContent(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("idContent") Integer idContent
, @Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
);


    @Operation(summary = "Devuelve la información de un contenido de la lista de Ver-mas-tarde del usuario, obteniendolo mediante la cookie de la sesión, y usando el id establecido en el path del contenido a buscar en la lista.", description = "Devuelve la información de un contenido de la lista de Ver-mas-tarde del usuario, dado el id del contenido en el path", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "seeLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VerMasTarde.class)))),
        
        @ApiResponse(responseCode = "400", description = "Usuario no encontrado"),
        
        @ApiResponse(responseCode = "404", description = "Valor no soportado") })
    @RequestMapping(value = "/seeLater/{idContent}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<VerMasTarde>> getSeeLaterContentByIdContent(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("idContent") Integer idContent
, @Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
);


    @Operation(summary = "Devuelve la lista de Ver-mas-tarde del usuario, obteniendolo mediante la cookie de la sesión.", description = "Devuelve la lista de Ver-mas-tarde del usuario", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "seeLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Operación exitosa", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VerMasTarde.class)))),
        
        @ApiResponse(responseCode = "400", description = "Usuario no encontrado"),
        
        @ApiResponse(responseCode = "404", description = "Valor no soportado") })
    @RequestMapping(value = "/seeLater",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<VerMasTarde>> getSeeLaterListByUserCookie(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
);


    @Operation(summary = "Añade un nuevo contenido a la lista de Ver-mas-tarde del usuario, obteniendolo mediante la cookie de la sesión.", description = "Añade un nuevo contenido a la lista de Ver-mas-tarde del usuario, dado el id del contenido a añadir en el path.", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "seeLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerMasTarde.class))) })
    @RequestMapping(value = "/seeLater/{idContent}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerMasTarde> postSeeLaterContentByIdContent(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("idContent") Integer idContent
, @Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
);


    @Operation(summary = "Añade un nuevo contenido a la lista de Ver-mas-tarde del usuario, obteniendolo mediante la cookie de la sesión.", description = "Añade un nuevo contenido a la lista de Ver-mas-tarde del usuario", security = {
        @SecurityRequirement(name = "cookieAuth"),
@SecurityRequirement(name = "medifli_auth", scopes = {
            "write:users",
"read:users"        })    }, tags={ "seeLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Operación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = VerMasTarde.class))) })
    @RequestMapping(value = "/seeLater",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<VerMasTarde> postSeeLaterContentByUserCookie(@Parameter(in = ParameterIn.COOKIE, description = "" ,required=true,schema=@Schema()) @CookieValue(value="SessionUserCookie", required=true) User sessionUserCookie
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody VerMasTarde body
);

}

